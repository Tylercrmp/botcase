import os
os.environ['CRYPTOGRAPHY_OPENSSL_NO_LEGACY'] = '1'
import os
from datetime import datetime
from aiogram import Router, F, Bot, types
from aiogram.filters import Command
from aiogram.types import Message, PreCheckoutQuery, CallbackQuery
from aiogram import Dispatcher
import asyncio
import logging
from aiogram.utils.keyboard import InlineKeyboardBuilder
from firebase_admin import firestore, initialize_app
import firebase_admin
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

if not firebase_admin._apps:
    cred = firebase_admin.credentials.Certificate('black-shop-182af-firebase-adminsdk-fbsvc-d9074e3a5c.json')
    initialize_app(cred)
db = firestore.client()

BOT_TOKEN = "7997381513:AAGsGs8r3TQFXdhnWO8Ss_kxdIjGducHtEE"
PROVIDER_TOKEN = "YOUR_PROVIDER_TOKEN"

# –ö–∞–Ω–∞–ª—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
REQUIRED_CHANNELS = [
    {"url": "https://t.me/blaacknews", "id": " "},
    {"url": "https://t.me/blackrussiavs", "id": " "}
]

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
logging.basicConfig(level=logging.INFO)

class PaymentState(StatesGroup):
    waiting_for_stars = State()

def main_menu_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text="üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω",
            web_app=types.WebAppInfo(url="https://blackshop.rf.gd")
        )
    )
    builder.row(
        types.InlineKeyboardButton(
            text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å",
            callback_data="replenish"
        ),
        types.InlineKeyboardButton(
            text="üë§ –õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç",
            callback_data="personal_account"
        )
    )
    builder.row(
        types.InlineKeyboardButton(
            text="üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è",
            callback_data="instructions"
        )
    )
    return builder.as_markup()

def get_subscription_check_keyboard():
    builder = InlineKeyboardBuilder()
    for channel in REQUIRED_CHANNELS:
        builder.row(
            types.InlineKeyboardButton(
                text=f"–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è {channel['id']}",
                url=channel['url']
            )
        )
    builder.row(
        types.InlineKeyboardButton(
            text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è",
            callback_data="check_subscription"
        )
    )
    return builder.as_markup()

async def check_user_subscriptions(user_id: int) -> bool:
    try:
        for channel in REQUIRED_CHANNELS:
            chat_member = await bot.get_chat_member(chat_id=channel['id'], user_id=user_id)
            if chat_member.status not in ['member', 'administrator', 'creator']:
                return False
        return True
    except Exception as e:
        logging.error(f"Error checking subscription: {e}")
        # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞
        return True

async def send_subscription_required_message(chat_id: int):
    channels_text = "\n".join([f"- {channel['id']}" for channel in REQUIRED_CHANNELS])
    await bot.send_message(
        chat_id=chat_id,
        text=f"‚ö†Ô∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã:\n{channels_text}\n\n"
             "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è'",
        reply_markup=get_subscription_check_keyboard()
    )

@dp.message(Command('start'))
async def start_command(msg: Message):
    await send_subscription_required_message(msg.chat.id)

@dp.callback_query(F.data == "check_subscription")
async def check_subscription_callback(callback: CallbackQuery):
    is_subscribed = await check_user_subscriptions(callback.from_user.id)
    if is_subscribed:
        await callback.message.delete()
        await callback.message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {callback.from_user.first_name}\n"
            "üõí –≠—Ç–æ CASE BLACK RUSSIA - –¢—É—Ç —Ç—ã –º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å –∫–µ–π—Å—ã –∏ –±—ã—Å—Ç—Ä–æ –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç!\n"
            "‚ö†Ô∏è –ë–æ–∏—à—å—Å—è –∑–∞ –∞–∫–∫–∞—É–Ω—Ç? - –ù–µ –±–æ–π—Å—è! –ú—ã –Ω–µ –ø—Ä–æ—Å–∏–º –ø–∞—Ä–æ–ª–∏, –∞ –≤—ã–≤–æ–¥–∏–º –≤—Å–µ –î–æ–Ω–∞—Ç–æ–º!\n"
            "üçÄ –ë—ã—Å—Ç—Ä–µ–π –∏—Å–ø—ã—Ç–∞–π —Å–≤–æ—é —É–¥–∞—á—É!",
            reply_markup=main_menu_keyboard()
        )
    else:
        await callback.answer("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)

@dp.callback_query(F.data == "replenish")
async def replenish_balance(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–µ–ª–∞–µ–º—ã—Ö –∑–≤—ë–∑–¥ (1 stars = 1.8 BC)\n"
        "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 1 stars"
    )
    await state.set_state(PaymentState.waiting_for_stars)
    await callback.answer()

@dp.message(PaymentState.waiting_for_stars)
async def process_stars_amount(msg: Message, state: FSMContext):
    try:
        stars = int(msg.text)
        if stars < 1:
            await msg.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - 1 stars")
            return
    except ValueError:
        await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1, 5, 10)")
        return
    
    total_bc = stars * 1.8
    
    await bot.send_invoice(
        chat_id=msg.chat.id,
        title=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞",
        description=f"–ü–æ–∫—É–ø–∫–∞ {stars} stars ({total_bc} BC)",
        provider_token=PROVIDER_TOKEN,
        currency="XTR",
        prices=[types.LabeledPrice(label=f"{stars} stars", amount=stars)],
        payload=f"payment_{msg.from_user.id}_{stars}",
        start_parameter="stars_payment",
        need_name=False,
        need_phone_number=False,
        need_email=False,
        need_shipping_address=False,
        is_flexible=False
    )
    await state.clear()

@dp.pre_checkout_query()
async def pre_checkout(pre_checkout_query: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@dp.message(F.successful_payment)
async def successful_payment(msg: Message):
    payment = msg.successful_payment
    stars = payment.total_amount
    total_bc = stars * 1.8
    
    user = msg.from_user
    payment_data = {
        "date": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "user_id": user.id,
        "username": user.username,
        "full_name": user.full_name,
        "stars": stars,
        "bc_amount": total_bc,
        "status": "completed"
    }
    
    db.collection("payments").document().set(payment_data)
    
    user_ref = db.collection("users").document(str(user.id))
    user_data = user_ref.get().to_dict() or {"balance": 0}
    user_ref.set({
        "balance": user_data["balance"] + total_bc,
        "last_update": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }, merge=True)
    
    await msg.answer(
        f"‚úÖ –û–ø–ª–∞—Ç–∞ {stars} stars –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n"
        f"–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {total_bc} BC",
        reply_markup=main_menu_keyboard()
    )

@dp.callback_query(F.data == "personal_account")
async def personal_account(callback: CallbackQuery):
    user_ref = db.collection("users").document(str(callback.from_user.id))
    user_data = user_ref.get().to_dict() or {"balance": 0}
    
    await callback.message.edit_text(
        f"üìå –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n\n"
        f"üÜî ID: {callback.from_user.id}\n"
        f"üë§ –ò–º—è: {callback.from_user.full_name}\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {user_data.get('balance', 0)} BC",
        reply_markup=main_menu_keyboard()
    )
    await callback.answer()

@dp.callback_query(F.data == "instructions")
async def show_instructions(callback: CallbackQuery):
    await callback.message.edit_text(
        "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é –±–∞–ª–∞–Ω—Å–∞:\n\n"
        "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–ø–æ–ª–Ω–∏—Ç—å'\n"
        "2. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ (1 stars = 1.8 BC)\n"
        "3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–ª–∞—Ç–µ–∂ –≤ –æ—Ç–∫—Ä—ã–≤—à–µ–π—Å—è —Ñ–æ—Ä–º–µ\n"
        "4. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n"
        "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - 1 stars",
        reply_markup=main_menu_keyboard()
    )
    await callback.answer()

@dp.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery):
    await callback.message.edit_text(
        f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_keyboard()
    )
    await callback.answer()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())